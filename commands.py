import re
import sys
import locale

from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import ContextTypes
from database import add_item, get_items, delete_item, update_notification_status, save_chat_id, get_chat_id
from steam_api import fetch_price
from config import NOTIFICATION_MODE

sys.stdout.reconfigure(encoding='utf-8')  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ Python –Ω–∞ UTF-8
locale.setlocale(locale.LC_ALL, 'C.UTF-8')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –Ω–∞ UTF-8

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
INPUT_NAME, INPUT_PRICE = range(2)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
STATE_CHANGE_INTERVAL = "change_interval"
STATE_CHANGE_MODE = "change_mode"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —á–∞—Ç–∞ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    chat_id = update.effective_chat.id
    context.user_data["chat_id"] = chat_id
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω!")
    await main_menu(update, context)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        ["–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"],
        ["–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


async def process_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –º–µ–Ω—é"""
    text = update.message.text.strip()

    if text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É:")
        context.user_data["state"] = "add_item_name"


    elif text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç":

        items = get_items()

        if not items:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—É—Å—Ç.")

            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞

        keyboard = [

            [InlineKeyboardButton(f"{name} ‚ùå", callback_data=f"delete_{name}")]

            for name, _, _ in items

        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

    elif text == "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤":
        items = get_items()
        if not items:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—É—Å—Ç.")
            return

        item_list = "\n".join(f"- {name}: {price} —Ä—É–±." for name, price, _ in items)
        await update.message.reply_text(f"üìú –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã:\n{item_list}")

    elif text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        keyboard = [
            ["–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏", "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"],
            ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=reply_markup)

    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:")
        context.user_data["state"] = "change_interval"

    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (always –∏–ª–∏ once):")
        context.user_data["state"] = "change_mode"

    elif text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await main_menu(update, context)

    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")


async def process_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    state = context.user_data.get("state")

    if state == "add_item_name":
        # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
        text = update.message.text.strip()
        if text.startswith("https://steamcommunity.com/market/listings/"):
            match = re.search(r"listings/\d+/([^/]+)$", text)
            if match:
                item_name = match.group(1)
            else:
                await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
        else:
            item_name = text

        context.user_data["item_name"] = item_name
        context.user_data["state"] = "add_item_price"
        await update.message.reply_text(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item_name}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.04):")

    elif state == "add_item_price":
        # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
        try:
            target_price = float(update.message.text.strip())
            item_name = context.user_data.get("item_name")
            if not item_name:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                context.user_data["state"] = None
                return

            add_item(item_name, target_price)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{item_name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ü–µ–Ω–æ–π {target_price} —Ä—É–±.")
            context.user_data["state"] = None
            await start(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

    elif state == "change_interval":
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            new_interval = int(update.message.text.strip())
            context.user_data["state"] = None
            await update.message.reply_text(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_interval} —Å–µ–∫—É–Ω–¥.")
        except ValueError:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

    elif state == "change_mode":
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        mode = update.message.text.strip().lower()
        if mode in ["always", "once"]:
            context.user_data["state"] = None
            await update.message.reply_text(f"–†–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{mode}'.")
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ 'always' –∏–ª–∏ 'once'.")

    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é: /start")


async def check_prices(context) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    chat_id = get_chat_id()
    if not chat_id:
        print("[DEBUG] CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è.")
        return  # –ï—Å–ª–∏ chat_id –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è

    items = get_items()
    if not items:
        print("[DEBUG] –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã: {items}")

    for item_name, target_price, notified in items:
        current_price = fetch_price(item_name)

        if current_price is None:
            print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è '{item_name}'.")
            continue

        print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º '{item_name}': —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {current_price}, —Ü–µ–ª–µ–≤–∞—è {target_price}, —Å—Ç–∞—Ç—É—Å {notified}")

        if current_price >= target_price:
            if NOTIFICATION_MODE == "always" or (NOTIFICATION_MODE == "once" and not notified):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–∞ '{item_name}' –¥–æ—Å—Ç–∏–≥–ª–∞ {current_price} —Ä—É–±. –∏–ª–∏ –≤—ã—à–µ (—Ü–µ–ª–µ–≤–∞—è: {target_price} —Ä—É–±.)."
                )
                print(f"[DEBUG] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è '{item_name}'.")
                if NOTIFICATION_MODE == "once":
                    update_notification_status(item_name, True)
        elif notified and NOTIFICATION_MODE == "once":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            update_notification_status(item_name, False)
            print(f"[DEBUG] –°–±—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è '{item_name}'.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã"""
    context.user_data["state"] = None
    await start(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


async def save_user_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = update.effective_chat.id
    save_chat_id(chat_id)
    await update.message.reply_text("üìã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à chat_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")


async def delete_item_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫"""
    items = get_items()
    if not items:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø—É—Å—Ç.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    keyboard = [
        [
            InlineKeyboardButton(f"{name} ‚ùå", callback_data=f"delete_{name}")
        ]
        for name, _, _ in items
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)


async def handle_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    if query.data.startswith("delete_"):
        item_name = query.data.split("_", 1)[1]
        deleted = delete_item(item_name)

        if deleted:
            await query.edit_message_text(f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç '{item_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
        else:
            await query.edit_message_text(f"‚ùå –ü—Ä–µ–¥–º–µ—Ç '{item_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
